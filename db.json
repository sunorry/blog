{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1}],"Cache":[{"_id":"source/_posts/C语言复习.md","shasum":"7fc340e46d4c4a38429239886f297261cded0083","modified":1445958592000},{"_id":"source/_posts/Hello.md","shasum":"517dacde12ff02ee689f939d8d91d9f61f4e57b9","modified":1445853068000},{"_id":"source/_posts/C-ARRAY.md","shasum":"7a19bd3236c2441c6872b74f91c94b77a671e8ed","modified":1445963705000},{"_id":"source/_posts/Point-in-C.md","shasum":"eca8f93e7c54dd625ce181f2121ef40d4ebc9476","modified":1445963719000},{"_id":"themes/landscape/Gruntfile.js","shasum":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1445850035000},{"_id":"themes/landscape/LICENSE","shasum":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1445850035000},{"_id":"themes/landscape/README.md","shasum":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1445850035000},{"_id":"themes/landscape/_config.yml","shasum":"e1fa116f99b8ab7c23ab75b59932a1a5b9aeb1e3","modified":1445850035000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","shasum":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1445850035000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","shasum":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1445850035000},{"_id":"themes/landscape/layout/_partial/article.ejs","shasum":"01201725258ad2aaee606cd4dfdebc21b646def1","modified":1445850035000},{"_id":"themes/landscape/layout/_partial/archive.ejs","shasum":"d7de6421497ffaf65e4f5fe4bed71fcea51fde80","modified":1445850035000},{"_id":"themes/landscape/layout/_partial/footer.ejs","shasum":"4b19c1080c9e6c2acd922a88ed29d183a3b5bc09","modified":1445850035000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1445850035000},{"_id":"themes/landscape/layout/_partial/head.ejs","shasum":"da9a4ab32efc44c098f317fe64e2335989929b0e","modified":1445850035000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","shasum":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1445850035000},{"_id":"themes/landscape/layout/_partial/header.ejs","shasum":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1445850035000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","shasum":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1445850035000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","shasum":"f26d30355ba9144c51e700e8edc6a4ab6144ff9a","modified":1445850035000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","shasum":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1445850035000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","shasum":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1445850035000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1445850035000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1445850035000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","shasum":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1445850035000},{"_id":"themes/landscape/layout/_widget/archive.ejs","shasum":"985fbeb01142b9d526cda8ebc372c1d361d69a6b","modified":1445850035000},{"_id":"themes/landscape/layout/_widget/category.ejs","shasum":"36ab37878129d152e3cbdeb839c08e52af1acd58","modified":1445850035000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","shasum":"feba7c00fa59ba13bf870b358a499fde4473d335","modified":1445850035000},{"_id":"themes/landscape/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1445850035000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","shasum":"34dc8cdd96cdb41dd11cb7513f13714373e5104a","modified":1445850035000},{"_id":"themes/landscape/layout/_widget/tag.ejs","shasum":"b3f321ddda6be2702a286d5b11af9533509506fb","modified":1445850035000},{"_id":"themes/landscape/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1445850035000},{"_id":"themes/landscape/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1445850035000},{"_id":"themes/landscape/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1445850035000},{"_id":"themes/landscape/layout/layout.ejs","shasum":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1445850035000},{"_id":"themes/landscape/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1445850035000},{"_id":"themes/landscape/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1445850035000},{"_id":"themes/landscape/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1445850035000},{"_id":"themes/landscape/package.json","shasum":"85358dc34311c6662e841584e206a4679183943f","modified":1445850035000},{"_id":"themes/landscape/source/css/_extend.styl","shasum":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1445850035000},{"_id":"themes/landscape/source/css/_partial/archive.styl","shasum":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1445850035000},{"_id":"themes/landscape/source/css/_partial/article.styl","shasum":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1445850035000},{"_id":"themes/landscape/source/css/_partial/footer.styl","shasum":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1445850035000},{"_id":"themes/landscape/source/css/_partial/comment.styl","shasum":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1445850035000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","shasum":"36eefe6332b86b66023a9884b754d305235846b4","modified":1445850035000},{"_id":"themes/landscape/source/css/_partial/header.styl","shasum":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1445850035000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","shasum":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1445850035000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","shasum":"890349df5145abf46ce7712010c89237900b3713","modified":1445850035000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","shasum":"bc5487b9a0bfe5f745423331824d3f3637ccd430","modified":1445850035000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","shasum":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1445850035000},{"_id":"themes/landscape/source/css/_util/grid.styl","shasum":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1445850035000},{"_id":"themes/landscape/source/css/_variables.styl","shasum":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1445850035000},{"_id":"themes/landscape/source/css/_util/mixin.styl","shasum":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1445850035000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1445850035000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1445850035000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1445850035000},{"_id":"themes/landscape/source/css/style.styl","shasum":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1445850035000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1445850035000},{"_id":"themes/landscape/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1445850035000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1445850035000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1445850035000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1445850035000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1445850035000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1445850035000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1445850035000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1445850035000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1445850035000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1445850035000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1445850035000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1445850035000},{"_id":"themes/landscape/source/js/script.js","shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1445850035000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1445850035000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1445850035000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1445850035000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1445850035000},{"_id":"themes/landscape/source/css/images/banner.jpg","shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1445850035000}],"Category":[{"name":"C","_id":"cig9ka8gy00016g3a9d1b2tct"}],"Data":[],"Page":[],"Post":[{"title":"Memory and ARRAY in C","date":"2015-10-27T16:05:00.000Z","_content":"[原文链接](http://theocacao.com/document.page/231)\n\n## Basic memory\n计算内存的单位是 `byte`。一个标准的 `int` 变量占用 4 个比特。\n\n<!-- more --> \n\n内存可以来自 **data segment（数据段）** 或者 **stack**\n    \n    在采用段式内存管理的架构中，数据段（data segment）通常是指用来存放程序中已初始化的全局变量的一块内存区域。数据段属于静态内存分配。\n    \n在函数外声明的变量，`global`。任何 func 都能进入。它存在 data segment。\nThis memory is in use for as long as the program is running.\n\nstack 用于存储在函数中的变量。它是暂时性的。\n\n```\n#include <stdio.h>\n  \n// this global variable resides in the data segment\nint globalMonsters = 2;\n\nvoid addFourMonsters ()\n{\n  // this variable uses memory in the stack\n  int stackMonsters = 4;\n\n  // we add the value of the stack variable\n  // to the global variable\n  globalMonsters += stackMonsters;  \n}\n\nmain ()\n{\n  printf (\"Global monsters: %i\\n\", globalMonsters);\n  addFourMonsters();  \n  printf (\"Global monsters: %i\\n\", globalMonsters);\n  addFourMonsters();  \n  printf (\"Global monsters: %i\\n\", globalMonsters);\n}\n```\noutput\n* Global monsters: 2\n* Global monsters: 6\n* Global monsters: 10\n\ncreate an array with **fixed** size.\n```\n// int (4 bytes) x 5 = 20 bytes\nint myIntArray[5]\n```","source":"_posts/C-ARRAY.md","raw":"title: Memory and ARRAY in C\ntags:\n  - C\ncategories:\n  - C\ndate: 2015-10-28 00:05:00\n---\n[原文链接](http://theocacao.com/document.page/231)\n\n## Basic memory\n计算内存的单位是 `byte`。一个标准的 `int` 变量占用 4 个比特。\n\n<!-- more --> \n\n内存可以来自 **data segment（数据段）** 或者 **stack**\n    \n    在采用段式内存管理的架构中，数据段（data segment）通常是指用来存放程序中已初始化的全局变量的一块内存区域。数据段属于静态内存分配。\n    \n在函数外声明的变量，`global`。任何 func 都能进入。它存在 data segment。\nThis memory is in use for as long as the program is running.\n\nstack 用于存储在函数中的变量。它是暂时性的。\n\n```\n#include <stdio.h>\n  \n// this global variable resides in the data segment\nint globalMonsters = 2;\n\nvoid addFourMonsters ()\n{\n  // this variable uses memory in the stack\n  int stackMonsters = 4;\n\n  // we add the value of the stack variable\n  // to the global variable\n  globalMonsters += stackMonsters;  \n}\n\nmain ()\n{\n  printf (\"Global monsters: %i\\n\", globalMonsters);\n  addFourMonsters();  \n  printf (\"Global monsters: %i\\n\", globalMonsters);\n  addFourMonsters();  \n  printf (\"Global monsters: %i\\n\", globalMonsters);\n}\n```\noutput\n* Global monsters: 2\n* Global monsters: 6\n* Global monsters: 10\n\ncreate an array with **fixed** size.\n```\n// int (4 bytes) x 5 = 20 bytes\nint myIntArray[5]\n```","slug":"C-ARRAY","published":1,"updated":"2015-10-27T16:35:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cig9lm20s004b6n3a6cgb68dc"},{"title":"Point in C","date":"2015-10-27T16:24:00.000Z","_content":"[原文地址](http://blog.jobbole.com/25409/)\n\n这只是个简单的记录，更过看原文。\n\n<!-- more --> \n\n## 指针\n指针是一个存储计算机内存地址的变量。\n\n## 引用\n表示计算机内存地址。\n\n## 取值\n从指针指向的内存读取数据称作指针的取值。\n\n## &，*\n操作符 `*` 既可以用来声明一个指针变量，也可以用作指针的取值。当用在声明一个变量时，`*`表示这里声明了一个指针。其它情况用到`*`表示指针的取值。\n\n`&`是地址操作符，用来引用一个内存地址。通过在变量名字前使用`&`操作符，我们可以得到该变量的内存地址。\n\n```\n// 声明一个int指针\nint *ptr;\n// 声明一个int值\nint val = 1;\n// 为指针分配一个int值的引用\nptr = &val;\n// 对指针进行取值，打印存储在指针地址中的内容\nint deref = *ptr;\nprintf(\"%d\\n\", deref);\n```","source":"_posts/Point-in-C.md","raw":"title: Point in C\ntags:\n  - C\n  - ''\ncategories:\n  - C\ndate: 2015-10-28 00:24:00\n---\n[原文地址](http://blog.jobbole.com/25409/)\n\n这只是个简单的记录，更过看原文。\n\n<!-- more --> \n\n## 指针\n指针是一个存储计算机内存地址的变量。\n\n## 引用\n表示计算机内存地址。\n\n## 取值\n从指针指向的内存读取数据称作指针的取值。\n\n## &，*\n操作符 `*` 既可以用来声明一个指针变量，也可以用作指针的取值。当用在声明一个变量时，`*`表示这里声明了一个指针。其它情况用到`*`表示指针的取值。\n\n`&`是地址操作符，用来引用一个内存地址。通过在变量名字前使用`&`操作符，我们可以得到该变量的内存地址。\n\n```\n// 声明一个int指针\nint *ptr;\n// 声明一个int值\nint val = 1;\n// 为指针分配一个int值的引用\nptr = &val;\n// 对指针进行取值，打印存储在指针地址中的内容\nint deref = *ptr;\nprintf(\"%d\\n\", deref);\n```","slug":"Point-in-C","published":1,"updated":"2015-10-27T16:35:19.000Z","_id":"cig9lm21q004e6n3aqdoh6hm0","comments":1,"layout":"post","photos":[],"link":""},{"title":"Hello","date":"2015-10-26T09:09:39.000Z","_content":"这是我的新博客。\n\n之前的文章全部删除，一是域名过期，二是内容没什么使用价值。","source":"_posts/Hello.md","raw":"title: Hello\ndate: 2015-10-26 17:09:39\ntags: \n---\n这是我的新博客。\n\n之前的文章全部删除，一是域名过期，二是内容没什么使用价值。","slug":"Hello","published":1,"updated":"2015-10-26T09:51:08.000Z","_id":"cig9lm21r004i6n3aslaiqhrr","comments":1,"layout":"post","photos":[],"link":""},{"title":"C语言复习","date":"2015-10-27T13:28:00.000Z","_content":"[原文链接](http://cocoadevcentral.com/articles/000081.php)\n\n学习`Objective-C`中顺便复习下C语言。\n\n文件后缀形式 .c 。\n\n<!--more-->\n\n## A Sample C Program\n\n\n```\n#include <stdio.h>\nmain () {\n\tprintf(\"I'm a C program\\n\");\n}\n\n```\n\n`<stdio.h>`处理输入和输出，`printf`就是它的方法。\n所有的C程序都会有一个 main 函数。\n\n## Use Gcc to Complie\n\n```\ngcc test.c -o test\n```\n\n## Basic C Concepts\n\n### Typed Variables\nkind of data that a variable contains.\n\nHave to **declare the type** of data, can't change type.\n```\nint num1 = 2;\nfloat num2 = 1.65;\nchar vari = 'A';\n```\n\n### Available Types\n\n* int\n* unsigned int(no negatives)\n* float\n* double, long (no often see)\n* char\n\nc also allows you to create your own variable types.\n\n### Typed Functions\n```\n// 必须由返回值\nint numberOfPeople() {\n\treturn 3;\n}\n\nvoid printHello() {\n\tprintf(\"Hello!\\n\")\n}\n```\n\n### Types For Parameters\n参数的类型也必须声明\n```\ninit difference(int val1, int val2) {\n\treturn val1 - val2;\n}\n```\n\n### Declaring Functions\n\n```\n#include <stdio.h>\n\t\nint sum ( int x, int y );\n\nmain (){\n  int theSum = sum (10, 11);\n  printf ( \"Sum: %i\\n\", theSum );\n}\n\nint sum ( int x, int y ){\n  return x + y;\n}\n```\n\n### Format String\n```\nint var1 = 3;\nprintf(\"value is %i\", var1);\n```\n* int -> %i/%d\n* unsigned int -> %u\n* float -> %f\n* char -> %c\n\n### Type Casting\n```\nint   trips           = 6;\nfloat distance        = 4.874;\nint   approxDistance  = (int)distance;\n```\n\n### Create a Header File\n就和 OC 中的添加一个文件（某种方式），出来一个 .h 一个 .m 文件。\n```\n// math_functions.h\nint sum (int x, int y);\n```\n\nfunction implementations.\n\nmath_function.c\n```\nint sum (int x, int y) {\n\treturn (x + y)\n}\n```\n\nusing Header File\n```\n#include <stdio.h>\n#include <math_functions.h>\n\nmain() {\n\tint theSum = sum(8, 12);\n}\n```\n\n### Structs\n**structured groups of variables**\n```\ntypedef struct {\n\tint length;\n    int year;\n} Song;\n```\n\n看起来是声明了两个变量，其实是创造了一种新的变量类型。\n`typedef` 给 `struct` 一个名字， -Song.\n```\nSong song1;\n\nsong1.lengthInSeconds =  213;\nsong1.yearRecorded    = 1994;\n\nSong song2;\n\nsong2.lengthInSeconds =  248;\nsong2.yearRecorded    = 1998;\n```\n\n#### Structs in Functions\nFunctions can specify structs as input or output. These function declarations and the struct itself can be put in a header file. \n\n***song.h**\n```\ntypedef struct {\n\tint length;\n    int year;\n} Song;\n\nSong make_song (int second, int year);\nvoid display_song (Song theSong);\n```\n\n**Song.c**\n```\n#include <stdio.h>\n#include \"song.h\"\n\nSong make_song (int seconds, int year) {\n  Song newSong;\n\n  newSong.lengthInSeconds = seconds;\n  newSong.yearRecorded    = year;\n  display_song (newSong);\n\n  return newSong;\n}\n\nvoid display_song (Song theSong) {\n  printf (\"the song is %i seconds long \", theSong.lengthInSeconds);\n  printf (\"and was made in %i\\n\", theSong.yearRecorded);\n}\n\n```\n\n#### Structs in Use\nNow we need a program that uses the song.h and song.c files. \n```\n#include <stdio.h>\n#include \"song.h\"\n\nmain() {\n  Song firstSong  = make_song (210, 2004);\n  Song secondSong = make_song (256, 1992);\n\n  Song thirdSong  = { 223, 1997 };\n  display_song ( thirdSong );\n\n  Song fourthSong = { 199, 2003 };\n}\n```\n\n### Constants\n```\nconst int age = 123;\n```\n\n###Enums\nApple uses enums in Cocoa to group a series of related constants. \n```\nenum {\n  NSCaseInsensitiveSearch = 1,\n  NSLiteralSearch = 2,\n  NSBackwardsSearch = 4,\n  NSAnchoredSearch = 8,\n  NSNumericSearch = 64\n};\n```","source":"_posts/C语言复习.md","raw":"title: C语言复习\ntags:\n  - C\ncategories:\n  - C\ndate: 2015-10-27 21:28:00\n---\n[原文链接](http://cocoadevcentral.com/articles/000081.php)\n\n学习`Objective-C`中顺便复习下C语言。\n\n文件后缀形式 .c 。\n\n<!--more-->\n\n## A Sample C Program\n\n\n```\n#include <stdio.h>\nmain () {\n\tprintf(\"I'm a C program\\n\");\n}\n\n```\n\n`<stdio.h>`处理输入和输出，`printf`就是它的方法。\n所有的C程序都会有一个 main 函数。\n\n## Use Gcc to Complie\n\n```\ngcc test.c -o test\n```\n\n## Basic C Concepts\n\n### Typed Variables\nkind of data that a variable contains.\n\nHave to **declare the type** of data, can't change type.\n```\nint num1 = 2;\nfloat num2 = 1.65;\nchar vari = 'A';\n```\n\n### Available Types\n\n* int\n* unsigned int(no negatives)\n* float\n* double, long (no often see)\n* char\n\nc also allows you to create your own variable types.\n\n### Typed Functions\n```\n// 必须由返回值\nint numberOfPeople() {\n\treturn 3;\n}\n\nvoid printHello() {\n\tprintf(\"Hello!\\n\")\n}\n```\n\n### Types For Parameters\n参数的类型也必须声明\n```\ninit difference(int val1, int val2) {\n\treturn val1 - val2;\n}\n```\n\n### Declaring Functions\n\n```\n#include <stdio.h>\n\t\nint sum ( int x, int y );\n\nmain (){\n  int theSum = sum (10, 11);\n  printf ( \"Sum: %i\\n\", theSum );\n}\n\nint sum ( int x, int y ){\n  return x + y;\n}\n```\n\n### Format String\n```\nint var1 = 3;\nprintf(\"value is %i\", var1);\n```\n* int -> %i/%d\n* unsigned int -> %u\n* float -> %f\n* char -> %c\n\n### Type Casting\n```\nint   trips           = 6;\nfloat distance        = 4.874;\nint   approxDistance  = (int)distance;\n```\n\n### Create a Header File\n就和 OC 中的添加一个文件（某种方式），出来一个 .h 一个 .m 文件。\n```\n// math_functions.h\nint sum (int x, int y);\n```\n\nfunction implementations.\n\nmath_function.c\n```\nint sum (int x, int y) {\n\treturn (x + y)\n}\n```\n\nusing Header File\n```\n#include <stdio.h>\n#include <math_functions.h>\n\nmain() {\n\tint theSum = sum(8, 12);\n}\n```\n\n### Structs\n**structured groups of variables**\n```\ntypedef struct {\n\tint length;\n    int year;\n} Song;\n```\n\n看起来是声明了两个变量，其实是创造了一种新的变量类型。\n`typedef` 给 `struct` 一个名字， -Song.\n```\nSong song1;\n\nsong1.lengthInSeconds =  213;\nsong1.yearRecorded    = 1994;\n\nSong song2;\n\nsong2.lengthInSeconds =  248;\nsong2.yearRecorded    = 1998;\n```\n\n#### Structs in Functions\nFunctions can specify structs as input or output. These function declarations and the struct itself can be put in a header file. \n\n***song.h**\n```\ntypedef struct {\n\tint length;\n    int year;\n} Song;\n\nSong make_song (int second, int year);\nvoid display_song (Song theSong);\n```\n\n**Song.c**\n```\n#include <stdio.h>\n#include \"song.h\"\n\nSong make_song (int seconds, int year) {\n  Song newSong;\n\n  newSong.lengthInSeconds = seconds;\n  newSong.yearRecorded    = year;\n  display_song (newSong);\n\n  return newSong;\n}\n\nvoid display_song (Song theSong) {\n  printf (\"the song is %i seconds long \", theSong.lengthInSeconds);\n  printf (\"and was made in %i\\n\", theSong.yearRecorded);\n}\n\n```\n\n#### Structs in Use\nNow we need a program that uses the song.h and song.c files. \n```\n#include <stdio.h>\n#include \"song.h\"\n\nmain() {\n  Song firstSong  = make_song (210, 2004);\n  Song secondSong = make_song (256, 1992);\n\n  Song thirdSong  = { 223, 1997 };\n  display_song ( thirdSong );\n\n  Song fourthSong = { 199, 2003 };\n}\n```\n\n### Constants\n```\nconst int age = 123;\n```\n\n###Enums\nApple uses enums in Cocoa to group a series of related constants. \n```\nenum {\n  NSCaseInsensitiveSearch = 1,\n  NSLiteralSearch = 2,\n  NSBackwardsSearch = 4,\n  NSAnchoredSearch = 8,\n  NSNumericSearch = 64\n};\n```","slug":"C语言复习","published":1,"updated":"2015-10-27T15:09:52.000Z","_id":"cig9lm21s004j6n3aw90sybtu","comments":1,"layout":"post","photos":[],"link":""}],"PostAsset":[],"PostCategory":[{"post_id":"cig9lm20s004b6n3a6cgb68dc","category_id":"cig9ka8gy00016g3a9d1b2tct","_id":"cig9lm20u004c6n3ab09q4cc7"},{"post_id":"cig9lm21q004e6n3aqdoh6hm0","category_id":"cig9ka8gy00016g3a9d1b2tct","_id":"cig9lm21u004m6n3avebt2uk8"},{"post_id":"cig9lm21s004j6n3aw90sybtu","category_id":"cig9ka8gy00016g3a9d1b2tct","_id":"cig9lm21y004n6n3a81w1au00"}],"PostTag":[{"post_id":"cig9lm20s004b6n3a6cgb68dc","tag_id":"cig9ka8gy00026g3a1m02t8kv","_id":"cig9lm20u004d6n3a6reosppd"},{"post_id":"cig9lm21q004e6n3aqdoh6hm0","tag_id":"cig9ka8gy00026g3a1m02t8kv","_id":"cig9lm21q004g6n3ac46dta1d"},{"post_id":"cig9lm21q004e6n3aqdoh6hm0","tag_id":"cig9l2wls002r6n3aarqi4mef","_id":"cig9lm21q004h6n3ael3wu44x"},{"post_id":"cig9lm21s004j6n3aw90sybtu","tag_id":"cig9ka8gy00026g3a1m02t8kv","_id":"cig9lm21s004l6n3ao0nn8fw1"}],"Tag":[{"name":"C","_id":"cig9ka8gy00026g3a1m02t8kv"},{"name":"","_id":"cig9l2wls002r6n3aarqi4mef"}]}}